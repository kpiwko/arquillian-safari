import org.arquillian.spacelift.gradle.android.*
import org.arquillian.spacelift.gradle.arquillian.*
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.utils.*
import org.arquillian.spacelift.Spacelift
import org.arquillian.spacelift.task.os.CommandTool
import org.arquillian.spacelift.process.CommandBuilder

// own tasks
import org.arquillian.safari.net.*

import java.io.File

defaultTasks 'test'
apply plugin: 'spacelift'

// additional parameters you can pass from command line via -P{{name}}={{value}}
ext {
    androidTargets = [[name: 'Google Inc.:Google APIs (x86 System Image):19', abi: 'default/x86'],
                      [name: 'Google Inc.:Google APIs:21', abi: 'google_apis/x86']]
    defaultBrowsers = ['firefox', 'chrome']
}

spacelift {
    // this is where Spacelift will perform tests
    workspace = new File(project.rootDir, 'ws')
    // this is where Spacelift will cache installations
    installationsDir = new File(project.rootDir, 'ws/installations')
    tools {
        // create Spacelift task for calling Java
        java {
            command ([
                linux: "java",
                windows: "java.exe",
                mac: "java",
                solaris: "java"
            ])
        }
        // create Spacelift task for calling Maven
        mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")

                def mvnPath = null
                if (m2 != null && !m2.isEmpty() && (new File(m2, 'mvn')).exists()) {
                    mvnPath = new File(new File(m2), 'mvn').getCanonicalPath()
                } else if (m2_home != null && !m2_home.isEmpty() && (new File(m2_home, 'mvn')).exists()) {
                    mvnPath = new File(new File(m2_home), 'mvn').getCanonicalPath()
                } else {
                    mvnPath = "mvn"
                }

                if(EnvironmentUtils.runsOnWindows()) {
                    mvnPath += '.bat'
                }

                return new CommandBuilder(mvnPath)
            }
        }
    }
    // various execution profiles
    // you can specify a profile by -P{{profileName}}
    profiles {
        // this profile is triggered by default
        "default" {
            enabledInstallations '*'
            tests '*'
        }
        androidTests {
            enabledInstallations 'androidSdk'
            tests 'droidiumScenario'
        }
        browserTests {
            enabledInstallations 'androidSdk'
            tests 'browsersScenario'
        }
    }
    // these installation will be installed prior tests are executed
    installations {
      // install Android SDK
      androidSdk(from:AndroidSdkInstallation) {
          product 'android'
          version '24.0.2'
          androidTargets project.androidTargets
          createAvds false
          postActions {
            // update arquillian.xml files with Android homes in all installations and integration test directory
            Spacelift.task([
                androidHome: "${home}",
                androidSdkHome: "${project.spacelift.workspace}"
                ], ArquillianXmlUpdater)
            .dir(project.rootDir).extension('droidium-platform').execute().await()
          }
      }
    }

    // test definitions
    tests {
        droidiumScenario {
            // this will be executed for each android target defined in ext {}
            dataProvider {
                project.androidTargets
            }
            execute { target ->
                // execute example tests where Droidium is used
                Spacelift.task(MavenExecutor)
                    .pom("${project.rootDir}/arquillian-droidium-scenario/pom.xml")
                    .goals('clean','test')
                    .androidTarget(target.name)
                    .surefireSuffix("android-${target.name[-2..-1]}")
                    .property("arq.group.containers.container.android.configuration.avdName=${target.name.replaceAll('[\\W]|_', '')}")
                    .execute().await()
            }
        }
        browsersScenario {
            // try to figure out what is the real IP of this machine
            // also shows that you can define tasks locally in buildSrc
            def ip = Spacelift.task(GuessRealIPTask).execute().await()
            println "Trying to run test with ${ip}"

            dataProvider {
                // if not provided from command line (-Pbrowsers), this is has defaultBrowsers value
                project.browsers
            }
            execute { browser ->
                Spacelift.task(MavenExecutor)
                    .pom("${project.rootDir}/arquillian-browsers-scenario/pom.xml")
                    .goals('clean', 'test')
                    .property("jboss.bind.address=${ip}")
                    .surefireSuffix(browser)
                    .profiles('arq-jbossas-managed', "webdriver-${browser}")
                    .execute().await()
            }
        }
    }
}

// build dependencies
buildscript {
    repositories {
        mavenCentral()
        // you need this only if you plan to use SNAPSHOT version of this plugin
        maven {
            name 'jboss-staging-repository-group'
            url 'https://repository.jboss.org/nexus/content/groups/staging'
        }
    }
    dependencies {
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
